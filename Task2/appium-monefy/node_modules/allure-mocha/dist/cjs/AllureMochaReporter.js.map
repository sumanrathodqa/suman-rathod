{"version":3,"file":"AllureMochaReporter.js","names":["Mocha","_interopRequireWildcard","require","_nodeProcess","_allureJsCommons","_sdk","_reporter","_runtime","_MochaTestRuntime","_extraReporters2","_legacyUtils","_utils","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_objectWithoutProperties","o","_objectWithoutPropertiesLoose","getOwnPropertySymbols","length","indexOf","propertyIsEnumerable","ownKeys","keys","filter","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_classPrivateFieldInitSpec","_checkPrivateRedeclaration","TypeError","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","String","Number","_classPrivateFieldGet","s","_assertClassBrand","_classPrivateFieldSet","EVENT_SUITE_BEGIN","EVENT_SUITE_END","EVENT_TEST_BEGIN","EVENT_TEST_END","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_TEST_PENDING","EVENT_HOOK_BEGIN","EVENT_HOOK_END","EVENT_TEST_RETRY","Runner","constants","_extraReporters","AllureMochaReporter","reporters","Base","constructor","runner","opts","_this","_opts$reporterOptions","isInWorker","undefined","this","Map","_this$currentHook","root","currentHook","currentTest","_len","message","Array","_key","runtime","applyRuntimeMessages","categories","writeCategoriesDefinitions","environmentInfo","writeEnvironmentInfo","name","content","options","_this$currentHook2","_opts$encoding","contentType","encoding","buffer","Buffer","from","writeAttachment","wrapInStep","on","onSuite","onSuiteEnd","onTest","onPassed","onFailed","onPending","onTestEnd","onHookStart","onHookEnd","suite","parent","testplan","applyTestPlan","idIndex","fullNameIndex","scopeUuid","startScope","scopesStack","writeTestScopes","pop","writeScope","test","retriedTest","testsMap","testScope","getTestScope","delete","globalLabels","getEnvironmentLabels","label","initialLabels","getLanguageLabel","getFrameworkLabel","getFrameworkName","getHostLabel","getThreadLabel","getWorkerId","metaLabels","getAllureMetaLabels","links","getAllureMetaLinks","labels","concat","file","packageLabel","getPackageLabel","setTestScope","retryNum","currentRetry","parameters","excluded","startTest","getAllureDisplayName","stage","Stage","RUNNING","fullName","getAllureFullName","testCaseId","getTestCaseId","updateTest","status","Status","PASSED","_","error","getStatusFromError","statusDetails","getMessageAndTraceFromError","isIncludedInTestRun","SKIPPED","defaultSuites","getSuitesOfMochaTest","ensureSuiteLabels","FINISHED","stopTest","writeTest","hook","_hook$ctx","_ref","_hook$originalTitle","hookCategory","hookScope","getHookType","ctx","getCurrentSuiteScope","originalTitle","title","startFixture","updateFixture","stopFixture","tests","testScopeUuid","env","MOCHA_WORKER_ID","allureConfig","reporterOptions","resultsDir","extraReporters","restOptions","ReporterRuntime","writer","createDefaultWriter","createTestPlanIndices","testRuntime","MochaTestRuntime","setGlobalTestRuntime","setLegacyApiRuntime","parallel","_opts$require","resolveParallelModeSetupFile","applyListeners","enableExtraReporters","done","failures","fn","doneAll","exports"],"sources":["../../src/AllureMochaReporter.ts"],"sourcesContent":["import * as Mocha from \"mocha\";\nimport { env } from \"node:process\";\nimport { type AttachmentOptions, type ContentType, type Label, type Parameter } from \"allure-js-commons\";\nimport { Stage, Status } from \"allure-js-commons\";\nimport type { Category, RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport { getHostLabel, getThreadLabel } from \"allure-js-commons/sdk/reporter\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  ensureSuiteLabels,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getLanguageLabel,\n  getPackageLabel,\n} from \"allure-js-commons/sdk/reporter\";\nimport { setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { MochaTestRuntime } from \"./MochaTestRuntime.js\";\nimport { doneAll, enableExtraReporters } from \"./extraReporters.js\";\nimport { setLegacyApiRuntime } from \"./legacyUtils.js\";\nimport type { AllureMochaReporterConfig, TestPlanIndices } from \"./types.js\";\nimport {\n  applyTestPlan,\n  createTestPlanIndices,\n  getAllureDisplayName,\n  getAllureFullName,\n  getAllureMetaLabels,\n  getAllureMetaLinks,\n  getHookType,\n  getSuitesOfMochaTest,\n  getTestCaseId,\n  getTestScope,\n  isIncludedInTestRun,\n  resolveParallelModeSetupFile,\n  setTestScope,\n} from \"./utils.js\";\n\nconst {\n  EVENT_SUITE_BEGIN,\n  EVENT_SUITE_END,\n  EVENT_TEST_BEGIN,\n  EVENT_TEST_END,\n  EVENT_TEST_PASS,\n  EVENT_TEST_FAIL,\n  EVENT_TEST_PENDING,\n  EVENT_HOOK_BEGIN,\n  EVENT_HOOK_END,\n  EVENT_TEST_RETRY,\n} = Mocha.Runner.constants;\n\nexport class AllureMochaReporter extends Mocha.reporters.Base {\n  protected readonly runtime: ReporterRuntime;\n  protected readonly testplan?: TestPlanIndices;\n  protected readonly testsMap: Map<string, Mocha.Test> = new Map();\n  protected scopesStack: string[] = [];\n  protected currentTest?: string;\n  protected currentHook?: string;\n  private readonly isInWorker: boolean;\n  readonly #extraReporters: Mocha.reporters.Base[] = [];\n\n  constructor(runner: Mocha.Runner, opts: Mocha.MochaOptions, isInWorker: boolean = false) {\n    super(runner, opts);\n\n    const allureConfig: AllureMochaReporterConfig = opts.reporterOptions ?? {};\n    const { resultsDir, extraReporters, ...restOptions } = allureConfig;\n\n    this.isInWorker = isInWorker;\n    this.runtime = new ReporterRuntime({\n      writer: createDefaultWriter({ resultsDir }),\n      ...restOptions,\n    });\n    this.testplan = createTestPlanIndices();\n\n    const testRuntime = new MochaTestRuntime(this.applyRuntimeMessages);\n\n    setGlobalTestRuntime(testRuntime);\n    setLegacyApiRuntime(this);\n\n    if (opts.parallel) {\n      opts.require = [...(opts.require ?? []), resolveParallelModeSetupFile()];\n    } else {\n      this.applyListeners();\n    }\n\n    if (!isInWorker && extraReporters) {\n      this.#extraReporters = enableExtraReporters(runner, opts, extraReporters);\n    }\n  }\n\n  applyRuntimeMessages = (...message: RuntimeMessage[]) => {\n    const root = this.currentHook ?? this.currentTest;\n    if (root) {\n      this.runtime.applyRuntimeMessages(root, message);\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  writeCategoriesDefinitions = (categories: Category[]) => {\n    this.runtime.categories = categories;\n    if (this.isInWorker) {\n      // done is not called in a worker; emit the file immediately\n      this.runtime.writeCategoriesDefinitions();\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  writeEnvironmentInfo = (environmentInfo: Record<string, string>) => {\n    this.runtime.environmentInfo = environmentInfo;\n    if (this.isInWorker) {\n      // done is not called in a worker; emit the file immediately\n      this.runtime.writeEnvironmentInfo();\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  testAttachment = (name: string, content: Buffer | string, options: ContentType | string | AttachmentOptions) => {\n    const root = this.currentHook ?? this.currentTest;\n    if (!root) {\n      return;\n    }\n    const opts = typeof options === \"string\" ? { contentType: options } : options;\n    const encoding = opts.encoding ?? \"utf8\";\n    const buffer = typeof content === \"string\" ? Buffer.from(content, encoding) : content;\n    this.runtime.writeAttachment(root, null, name, buffer, { ...opts, wrapInStep: false });\n  };\n\n  override done(failures: number, fn?: ((failures: number) => void) | undefined) {\n    this.runtime.writeEnvironmentInfo();\n    this.runtime.writeCategoriesDefinitions();\n    doneAll(this.#extraReporters, failures, fn);\n  }\n\n  private applyListeners = () => {\n    this.runner\n      .on(EVENT_SUITE_BEGIN, this.onSuite)\n      .on(EVENT_SUITE_END, this.onSuiteEnd)\n      .on(EVENT_TEST_BEGIN, this.onTest)\n      .on(EVENT_TEST_PASS, this.onPassed)\n      .on(EVENT_TEST_FAIL, this.onFailed)\n      .on(EVENT_TEST_RETRY, this.onFailed)\n      .on(EVENT_TEST_PENDING, this.onPending)\n      .on(EVENT_TEST_END, this.onTestEnd)\n      .on(EVENT_HOOK_BEGIN, this.onHookStart)\n      .on(EVENT_HOOK_END, this.onHookEnd);\n  };\n\n  private onSuite = (suite: Mocha.Suite) => {\n    if (!suite.parent && this.testplan) {\n      applyTestPlan(this.testplan.idIndex, this.testplan.fullNameIndex, suite);\n    }\n    const scopeUuid = this.runtime.startScope();\n    this.scopesStack.push(scopeUuid);\n  };\n\n  private onSuiteEnd = (suite: Mocha.Suite) => {\n    this.writeTestScopes(suite);\n    const scopeUuid = this.scopesStack.pop();\n    if (scopeUuid) {\n      this.runtime.writeScope(scopeUuid);\n    }\n  };\n\n  private onTest = (test: Mocha.Test) => {\n    if (this.currentTest) {\n      const retriedTest = this.testsMap.get(this.currentTest);\n      if (retriedTest) {\n        this.onTestEnd(retriedTest);\n        const testScope = getTestScope(retriedTest);\n        if (testScope) {\n          this.runtime.writeScope(testScope);\n        }\n      }\n      this.testsMap.delete(this.currentTest);\n      this.currentTest = undefined;\n    }\n\n    const globalLabels = getEnvironmentLabels().filter((label) => !!label.value);\n    const initialLabels: Label[] = [\n      getLanguageLabel(),\n      getFrameworkLabel(this.getFrameworkName()),\n      getHostLabel(),\n      getThreadLabel(this.getWorkerId()),\n    ];\n    const metaLabels = getAllureMetaLabels(test);\n    const links = getAllureMetaLinks(test);\n    const labels = globalLabels.concat(initialLabels, metaLabels);\n\n    if (test.file) {\n      const packageLabel: Label = getPackageLabel(test.file);\n\n      labels.push(packageLabel);\n    }\n\n    const scopeUuid = this.runtime.startScope();\n\n    setTestScope(test, scopeUuid);\n\n    // @ts-ignore\n    const retryNum = \"currentRetry\" in test ? test.currentRetry() : 0;\n    const parameters: Parameter[] = retryNum ? [{ name: \"Retry\", value: `${retryNum}`, excluded: true }] : [];\n\n    this.currentTest = this.runtime.startTest(\n      {\n        name: getAllureDisplayName(test),\n        stage: Stage.RUNNING,\n        fullName: getAllureFullName(test),\n        labels,\n        links: [...links],\n        testCaseId: getTestCaseId(test),\n        parameters: parameters,\n      },\n      [...this.scopesStack, scopeUuid],\n    );\n    this.testsMap.set(this.currentTest, test);\n  };\n\n  private onPassed = () => {\n    if (!this.currentTest) {\n      return;\n    }\n    this.runtime.updateTest(this.currentTest, (r) => {\n      r.status = Status.PASSED;\n    });\n  };\n\n  private onFailed = (_: Mocha.Test, error: Error) => {\n    if (!this.currentTest) {\n      return;\n    }\n    this.runtime.updateTest(this.currentTest, (r) => {\n      r.status = getStatusFromError(error);\n      r.statusDetails = {\n        ...r.statusDetails,\n        ...getMessageAndTraceFromError(error),\n      };\n    });\n  };\n\n  private onPending = (test: Mocha.Test) => {\n    if (isIncludedInTestRun(test)) {\n      if (!this.currentTest) {\n        this.onTest(test);\n      }\n      this.runtime.updateTest(this.currentTest!, (r) => {\n        r.status = Status.SKIPPED;\n        r.statusDetails = {\n          message: \"Test skipped\",\n        };\n      });\n    }\n  };\n\n  private onTestEnd = (test: Mocha.Test) => {\n    if (!this.currentTest) {\n      return;\n    }\n    if (isIncludedInTestRun(test)) {\n      const defaultSuites = getSuitesOfMochaTest(test);\n      this.runtime.updateTest(this.currentTest, (t) => {\n        ensureSuiteLabels(t, defaultSuites);\n        t.stage = Stage.FINISHED;\n      });\n      this.runtime.stopTest(this.currentTest);\n      this.runtime.writeTest(this.currentTest);\n      this.testsMap.delete(this.currentTest);\n      this.currentTest = undefined;\n\n      // We're writing the test's dedicated scope in onSuiteEnd instead of here\n      // because there might be afterEach hooks, which are reported after\n      // onTestEnd, not before.\n    }\n  };\n\n  private onHookStart = (hook: Mocha.Hook) => {\n    const [hookCategory, hookScope] = getHookType(hook);\n    const test = hook.ctx?.currentTest;\n    const scopeUuid = hookScope === \"each\" && test ? getTestScope(test) : this.getCurrentSuiteScope();\n    if (!scopeUuid) {\n      return;\n    }\n\n    const name = hook.originalTitle ?? hook.title ?? \"\";\n    if (hookCategory) {\n      this.currentHook = this.runtime.startFixture(scopeUuid, hookCategory, { name });\n    }\n  };\n\n  private onHookEnd = (hook: Mocha.Hook) => {\n    if (!this.currentHook) {\n      return;\n    }\n    this.runtime.updateFixture(this.currentHook, (r) => {\n      const error: Error | undefined = hook.error();\n      if (error) {\n        r.status = getStatusFromError(error);\n        r.statusDetails = {\n          ...r.statusDetails,\n          ...getMessageAndTraceFromError(error),\n        };\n      } else {\n        r.status = Status.PASSED;\n      }\n    });\n    this.runtime.stopFixture(this.currentHook);\n    this.currentHook = undefined;\n  };\n\n  private writeTestScopes = (suite: Mocha.Suite) => {\n    suite.tests.forEach((test) => {\n      const testScopeUuid = getTestScope(test);\n      if (testScopeUuid) {\n        this.runtime.writeScope(testScopeUuid);\n      }\n    });\n  };\n\n  private getCurrentSuiteScope = () =>\n    this.scopesStack.length > 0 ? this.scopesStack[this.scopesStack.length - 1] : undefined;\n\n  protected getFrameworkName = (): string => \"mocha\";\n\n  protected getWorkerId = (): string | undefined => env.MOCHA_WORKER_ID;\n}\n"],"mappings":"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","ignoreList":[]}