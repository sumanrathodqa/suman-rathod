{"version":3,"file":"utils.js","names":["dirname","extname","join","fileURLToPath","LabelName","extractMetadataFromString","getPosixPath","getRelativePath","md5","parseTestPlan","filename","import","meta","url","allureMochaDataKey","Symbol","getAllureData","item","data","title","defaultData","isIncludedInTestRun","fullName","createAllureFullName","labels","links","displayName","cleanTitle","test","titlePath","file","concat","createTestPlanSelectorIndex","testplan","createTestPlanIndex","e","selector","createTestPlanIdIndex","_e$id","id","toString","keySelector","Set","tests","map","filter","v","createTestPlanIndices","fullNameIndex","idIndex","getAllureFullName","getAllureMetaLabels","getAllureMetaLinks","getAllureId","values","l","name","ALLURE_ID","value","length","getAllureDisplayName","getTestScope","scope","setTestScope","getSuitesOfMochaTest","slice","resolveParallelModeSetupFile","getTestCaseId","testFilePath","suiteTitles","JSON","stringify","applyTestPlan","ids","selectors","rootSuite","suiteQueue","s","shift","allureData","allureId","has","pending","push","suites","hookTypeRegexp","getHookType","hook","match","exec"],"sources":["../../src/utils.ts"],"sourcesContent":["import type * as Mocha from \"mocha\";\nimport { dirname, extname, join } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport { LabelName } from \"allure-js-commons\";\nimport type { TestPlanV1, TestPlanV1Test } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport { getPosixPath, getRelativePath, md5, parseTestPlan } from \"allure-js-commons/sdk/reporter\";\nimport type { AllureMochaTestData, HookCategory, HookScope, HookType, TestPlanIndices } from \"./types.js\";\n\nconst filename = fileURLToPath(import.meta.url);\n\nconst allureMochaDataKey = Symbol(\"Used to access Allure extra data in Mocha objects\");\n\nconst getAllureData = (item: Mocha.Test): AllureMochaTestData => {\n  const data = (item as any)[allureMochaDataKey];\n\n  if (!data) {\n    const meta = extractMetadataFromString(item.title);\n    const defaultData: AllureMochaTestData = {\n      isIncludedInTestRun: true,\n      fullName: createAllureFullName(item),\n      labels: meta.labels,\n      links: meta.links,\n      displayName: meta.cleanTitle,\n    };\n\n    (item as any)[allureMochaDataKey] = defaultData;\n\n    return defaultData;\n  }\n\n  return data;\n};\n\nconst createAllureFullName = (test: Mocha.Test) => {\n  const titlePath = test.titlePath().join(\" > \");\n  return test.file ? `${getPosixPath(getRelativePath(test.file))}: ${titlePath}` : titlePath;\n};\n\nconst createTestPlanSelectorIndex = (testplan: TestPlanV1) => createTestPlanIndex((e) => e.selector, testplan);\n\nconst createTestPlanIdIndex = (testplan: TestPlanV1) => createTestPlanIndex((e) => e.id?.toString(), testplan);\n\nconst createTestPlanIndex = <T>(keySelector: (entry: TestPlanV1Test) => T | undefined, testplan: TestPlanV1): Set<T> =>\n  new Set(testplan.tests.map((e) => keySelector(e)).filter((v) => v)) as Set<T>;\n\nexport const createTestPlanIndices = (): TestPlanIndices | undefined => {\n  const testplan = parseTestPlan();\n  if (testplan) {\n    return {\n      fullNameIndex: createTestPlanSelectorIndex(testplan),\n      idIndex: createTestPlanIdIndex(testplan),\n    };\n  }\n};\n\nexport const getAllureFullName = (test: Mocha.Test) => getAllureData(test).fullName;\n\nexport const isIncludedInTestRun = (test: Mocha.Test) => getAllureData(test).isIncludedInTestRun;\n\nexport const getAllureMetaLabels = (test: Mocha.Test) => getAllureData(test).labels;\n\nexport const getAllureMetaLinks = (test: Mocha.Test) => getAllureData(test).links;\n\nexport const getAllureId = (data: AllureMochaTestData) => {\n  const values = data.labels.filter((l) => l.name === LabelName.ALLURE_ID).map((l) => l.value);\n  if (values.length) {\n    return values[0];\n  }\n};\n\nexport const getAllureDisplayName = (test: Mocha.Test) => getAllureData(test).displayName;\n\nexport const getTestScope = (test: Mocha.Test) => getAllureData(test).scope;\n\nexport const setTestScope = (test: Mocha.Test, scope: string) => {\n  getAllureData(test).scope = scope;\n};\n\nexport const getSuitesOfMochaTest = (test: Mocha.Test) => test.titlePath().slice(0, -1);\n\nexport const resolveParallelModeSetupFile = () =>\n  join(dirname(filename), `setupAllureMochaParallel${extname(filename)}`);\n\nexport const getTestCaseId = (test: Mocha.Test) => {\n  const testFilePath = test.file ? getPosixPath(getRelativePath(test.file)) : \"\";\n  const suiteTitles = test.titlePath().slice(0, -1);\n  return md5(JSON.stringify([testFilePath, ...suiteTitles, getAllureDisplayName(test)]));\n};\n\nexport const applyTestPlan = (ids: ReadonlySet<string>, selectors: ReadonlySet<string>, rootSuite: Mocha.Suite) => {\n  const suiteQueue = [];\n  for (let s: Mocha.Suite | undefined = rootSuite; s; s = suiteQueue.shift()) {\n    for (const test of s.tests) {\n      const allureData = getAllureData(test);\n      const allureId = getAllureId(allureData);\n      if (!selectors.has(allureData.fullName) && (!allureId || !ids.has(allureId))) {\n        allureData.isIncludedInTestRun = false;\n        test.pending = true;\n      }\n    }\n    suiteQueue.push(...s.suites);\n  }\n};\n\nconst hookTypeRegexp = /^\"(before|after) (all|each)\"/;\n\nexport const getHookType = (hook: Mocha.Hook): HookType => {\n  if (hook.title) {\n    const match = hookTypeRegexp.exec(hook.title);\n    if (match) {\n      return [match[1] as HookCategory, match[2] as HookScope];\n    }\n  }\n  return [];\n};\n"],"mappings":"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","ignoreList":[]}